apiVersion: apps/v1
items:
# MONGO Service
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      io.kompose.service: mongo
    name: mongo
  spec:
    ports:
    - name: "27017"
      port: 27017
      targetPort: 27017
    selector:
      io.kompose.service: mongo
  status:
    loadBalancer: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      io.kompose.service: mongo
    name: mongo
  spec:
    selector:
      matchLabels:
        io.kompose.service: mongo
    replicas: 1
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          io.kompose.service: mongo
      spec:
        containers:
        - env:
          - name: MONGO_INITDB_DATABASE
            value: capi
          - name: MONGO_INITDB_ROOT_PASSWORD
            value: capi
          - name: MONGO_INITDB_ROOT_USERNAME
            value: capi
          image: mongo
          name: capi-mongo
          ports:
          - containerPort: 27017
          resources: {}
          volumeMounts:
          - name: mongo-init
            mountPath: /docker-entrypoint-initdb.d/init-mongo.js
            subPath: init-mongo.js
          - mountPath: /data/db/
            name: mongo-claim1
        restartPolicy: Always
        volumes:
        - name: mongo-init
          configMap:
            name: mongo-init
        - name: mongo-claim1
          persistentVolumeClaim:
            claimName: mongo-claim1
  status: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: mongo-claim1
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 100Mi
  status: {}
kind: List
metadata: {}
